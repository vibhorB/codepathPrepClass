// Checkpoint2 - pretty print

public ArrayList<ArrayList<Integer>> prettyPrint(int a) {
    int n = (2*a) - 1;
    int[][] pp = new int[n][n];
    ArrayList<ArrayList<Integer>> pretty= new ArrayList<ArrayList<Integer>>();
    for(int i = 0; i < n ; i++){
      for(int j = 0; j < n ; j++) {
        pp[i][j] = Math.max(Math.abs(i - (a-1)), Math.abs(j-(a-1))) + 1;
      }
    }
    
    for(int j = 0; j <n ; j++){
        ArrayList<Integer> row = new ArrayList<Integer>();
      for(int i = 0; i < n ; i++) {
          row.add(pp[i][j]);
      }
        pretty.add(row);
    }
    return pretty;
}

//Checkpoint 3 - Kth smallest

public int kthsmallest(final List<Integer> a, int k) {
	  int[] aa = getArray(a);
    Arrays.sort(aa);
    return aa[k-1];
}
	
private int[] getArray(final List<Integer> a) {
    int[] n = new int[a.size()];
    for(int i = 0; i < a.size(); i++){
      n[i] = a.get(i);
    }
    return n;
}

//Checkpoint 4 - Next Greater

public ArrayList<Integer> nextGreater(ArrayList<Integer> a) {
    int n = a.size();
    final ArrayList<Integer> nextGreater = new ArrayList<Integer>();

    for (int i = 0; i < n; i++) {
      boolean found = false;
      for( int j = i+1; j < n; j++) {
        if(a.get(j) > a.get(i)) {
          found = true;
          nextGreater.add(a.get(j));
          break;
        }
      }
      if(found == false) {
        nextGreater.add(-1);
      }
    }
    return nextGreater;
}

//Checkpoint 5 - longest consecutive

public int longestConsecutive(final List<Integer> a) {
	    if(a.size() == 0) {
            return 0;
      }
      
      Set<Integer> nums = new HashSet<>();
      int max = 1;
      for(Integer i : a) {
          nums.add(i);
      }
        
      for(Integer current : a) {
          int prev = current - 1;
          int next = current + 1;
          int count = 1;
            
          while(nums.contains(prev)) {
              nums.remove(prev);
              prev -= 1;
              count += 1;
          }
            
          while(nums.contains(next)) {
              nums.remove(next);
              next += 1;
              count += 1;
          }  
          max = Math.max(count, max);
      }
      return max;
}
