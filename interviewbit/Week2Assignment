// GIF - http://recordit.co/Y0TruiGaQI

// Hashing - Fraction

public String fractionToDecimal(int num, int den) {
    if(num == 0) {
        return "0";
    }
    if(den == 0) {
        return "stupid";
    }

    StringBuilder sb = new StringBuilder();
    if(num < 0 && den < 0) {
        sb.append("");
    }
    else if(num < 0 || den < 0) {
        sb.append("-");
    }

    long n = Math.abs((long)num);
    long d = Math.abs((long)den);
    long ip = n/d;
    long fp = n%d;

    sb.append(String.valueOf(ip));
    if(fp == 0) {
        return sb.toString();
    }

    sb.append(".");
    Map<Long, Integer> map = new HashMap<Long, Integer>();
    map.put(fp, sb.length());

    while(fp != 0) {
        fp *= 10;
        long r = fp/d;
        sb.append(r);
        fp = fp%d;
        if(map.containsKey(fp)) {
            sb.insert(map.get(fp), "(");
            sb.append(")");
            fp = 0;
            break;
        }
        else {
            map.put(fp, sb.length());
        }
    }

    return sb.toString();
}

// Hashing - Longest substring without repeat

public int lengthOfLongestSubstring(String a) {
    if(a == null || a.length() == 0) {
        return 0;
    }
    if(a.length() == 1) {
        return 1;
    }

    int len = a.length();
      HashSet<Character> chars = new HashSet<Character>();
      int maxLen = 0;
      int i = 0, j = 0;
      while (i < len && j < len) {
          if (!chars.contains(a.charAt(j))){
              chars.add(a.charAt(j++));
              maxLen = Math.max(maxLen, j - i);
          }
          else {
              chars.remove(a.charAt(i++));
          }
      }
      return maxLen;
}

// LinkedList - Partition List

public ListNode partition(ListNode head, int x) {
    ListNode smaller = null;
      ListNode sh = null;
      ListNode larger = null;
      ListNode lh = null;

      ListNode start = head;

      while(start != null) {
        int val = start.val;
        ListNode temp = new ListNode(val);
        if(val < x) {
          if(sh == null) {
            sh = temp;
            smaller = sh;
          }else {
            smaller.next = temp;
            smaller = smaller.next;
          }
        }
        else {
          if(lh == null) {
            lh = temp;
            larger = lh;
          }else {
            larger.next = temp;
            larger = larger.next;
          }
        }

        start = start.next;
      }

      if(sh == null) {
          sh = lh;
          lh = lh.next;
          smaller = sh;
      }
      ListNode resultHead = sh;

      while(lh != null) {
        smaller.next = lh;
        lh = lh.next;
        smaller = smaller.next;
      }

      return resultHead;
}

// LinkedList - List Cycle

public ListNode detectCycle(ListNode a) {
  if(a == null) {
      return null;
    }
    ListNode slow = a;
    ListNode fast = a;

    while(slow != null && fast != null && fast.next != null) {
      slow = slow.next;
      fast = fast.next.next;

      if(fast == slow) {
        return findNode(a,fast);
      }
    }
    return null;
}

private static ListNode findNode(ListNode head, ListNode common) {
    ListNode s = common;
    ListNode e = common.next;
    int k = 1;

    while(s != e) {
      k += 1;
      e = e.next;
    }

    s = head;
    e = head;

    while(k > 0) {
      e = e.next;
      k -= 1;
    }

    while(s != e) {
        s = s.next;
        e = e.next;
    }

    return e;
}
