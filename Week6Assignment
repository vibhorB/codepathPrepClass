// GIF - http://recordit.co/acqLJTFeYt

// Max sum without adjacent elements

public int adjacent(ArrayList<ArrayList<Integer>> A) {

    if(A == null || A.size() == 0) {
        return 0;
    }
    ArrayList<Integer> first = A.get(0);
    ArrayList<Integer> second = A.get(1);
    int n = first.size();

    if(n == 0) {
        return 0;
    }

    int[] res = new int[n];

    res[0] = Math.max(first.get(0), second.get(0));

    if(n < 2) {
        return res[0];
    }

    res[1] = Math.max(res[0], Math.max(first.get(1), second.get(1)));

    for(int i = 2; i < n; i ++) {
        int temp = Math.max(first.get(i), second.get(i)) + res[i-2];
        res[i] = Math.max(temp, res[i-1]);
    }
    return res[n-1];
}

// Minimum sum path in matrix

public int minPathSum(ArrayList<ArrayList<Integer>> A) {
    if(A == null || A.size() == 0) {
        return 0;
    }

    int m = A.size();
    int n = A.get(0).size();
    int[][] res = new int[m][n];

    for(int i = 0; i < m; i ++) {
        ArrayList<Integer> level = A.get(i);
        for(int j = 0; j < n; j++) {
            if(i == 0 && j == 0) {
                res[i][j] = level.get(j);
            }
            else if(i == 0) {
                res[i][j] = res[i][j-1] + level.get(j);
            }
            else if(j == 0) {
                res[i][j] = res[i-1][j] + level.get(j);
            }
            else {
                res[i][j] = Math.min(res[i-1][j], res[i][j-1]) + level.get(j);
            }
        }
    }
    return res[m-1][n-1];
}


// Unique paths in a grid

public int uniquePathsWithObstacles(ArrayList<ArrayList<Integer>> A) {
  if(A == null || A.size() == 0) {
      return 0;
  }

  int m = A.size();
  int n = A.get(0).size();

  int[][] res = new int[m][n];
  for(int i = 0; i < m ; i++) {
      ArrayList<Integer> level = A.get(i);
      for(int j = 0; j < n; j++) {
          if(i == 0 && j == 0 && level.get(j) == 0) {
              res[i][j] = 1;
          }
          else if(i == 0 && level.get(j) == 0) {
              res[i][j] = res[i][j-1];
          }
          else if(j == 0 && level.get(j) == 0) {
              res[i][j] = res[i-1][j];
          }
          else if(level.get(j) == 0) {
              res[i][j] = res[i-1][j] + res[i][j-1];
          }
      }
  }
  return res[m-1][n-1];
}


// Max sum path in binary tree

int max;
    
public int maxPathSum(TreeNode A) {
    max = A.val;
    traverse(A);
    return max;
}

public int traverse(TreeNode A) {
    if(A == null) {
        return 0;
    }

    int left = Math.max(0, traverse(A.left));
    int right = Math.max(0, traverse(A.right));
    max = Math.max(max, A.val + left + right);

    return Math.max(left, right) + A.val;
}
