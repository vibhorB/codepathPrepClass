// Arrays - Pascal Triangle
public ArrayList<ArrayList<Integer>> generate(int a) {
	    ArrayList<ArrayList<Integer>> tri = new ArrayList<ArrayList<Integer>>();
        if(a < 1) {
            return tri;
        }
        int ends = 1;
        for(int i = 0; i < a; i++) {
            ArrayList<Integer> row = new ArrayList<Integer>();
            
            for(int j = 0; j <= i; j++) {
                if(j == 0 || j == i) {
                    row.add(ends);
                } else {
                    List<Integer> prev = tri.get(i-1);
                    row.add(prev.get(j-1) + prev.get(j));
                }
            }
            tri.add(row);
        }
        return tri;
	}
  
//Arrays - Largest number
public String largestNumber(final List<Integer> a) {
	    if(a == null || a.size() == 0) {
            return "";
        }
        String[] st = new String[a.size()];
        for(int i = 0; i < a.size(); i++) {
            st[i] = String.valueOf(a.get(i));
        }
        
        Arrays.sort(st, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                String num1 = s1 + s2;
                String num2 = s2 + s1;
                return num2.compareTo(num1);
            }
        });
        
        if(st[st.length-1].charAt(0) == '0') {
            return "0";
        }
        
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < st.length; i++) {
            sb.append(st[i]);
        }
        return sb.toString();
  }
  
  //Strings - Compare version numbers
  public int compareVersion(String v1, String v2) {
	    if(isEmptyString(v1)) {
            if(isEmptyString(v2)) {
                return 0;
            } else {
                return -1;
            }
        }
        else if(isEmptyString(v2)) {
            return 1;
        }
        
        String[] st1 = v1.split("\\.");
        String[] st2 = v2.split("\\.");
        
        int result = 0;
        
       int index = Math.max(st1.length,st2.length);
        for(int i = 0; i < index; i++) {
          double s1 = 0,s2 = 0;
          if(i < st1.length) {
            s1 = Double.parseDouble(st1[i]);
          }
          
          if(i < st2.length) {
            s2 = Double.parseDouble(st2[i]);
          }
          
          if(s1 > s2) {
              result = 1;
              break;
          }
          else if(s1 < s2) {
              result = -1;
              break;
          }
        }
        return result;
    }
    
    private static boolean isEmptyString(final String s) {
        return s == null || s.length() == 0;
    }
    
//Strings - Implement StrStr

public int strStr(final String h, final String n) {
	   if(h == null || h.length() == 0 || 
       n == null || n.length() == 0 ||
       n.length() > h.length()) {
      return -1;
    }
    
    int maxLoop = h.length() - n.length();
    for(int i = 0; i <= maxLoop; i++) {
      if(h.substring(i, i+n.length()).equals(n)) {
        return i;
      }
    }
    return -1;
  }
